# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
# 2 
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages
def update_damages(damages_list):
  updated_damages_list = []
  for damage in damages_list:      
    if "M" in damage:
      damage_stripped = damage.strip("M")
      updated_damages_list.append(float(damage_stripped) * conversion["M"]) 
    elif "B" in damage:
      damage_stripped = damage.strip("B")
      updated_damages_list.append(float(damage_stripped) * conversion["B"]) 
    else: 
      updated_damages_list.append(damage)
  return updated_damages_list

# Create a Table
# Create and view the hurricanes dictionary
# 3
def hurricane_dict(*hurricane_dict):
  new_dict = {names[i]: {"Name": names[i], "Month": months[i], "Year": years[i], "Max Sustained Wind": max_sustained_winds[i], "Area Affected": areas_affected[i], "Damage": update_damages(damages)[i], "Death": deaths[i]} for i in range(len(names))}
  return new_dict

new_hurricanes_dict = hurricane_dict(names, months, years, max_sustained_winds, areas_affected, update_damages(damages), deaths)

# Organizing by Year
# create a new dictionary of hurricanes with year and key
# 4
def hurricanes_by_year(hurricanes_dict):
  hurricanes_by_year_dict = {}
  for name, hurricane in hurricanes_dict.items():
    current_year = hurricane["Year"]
    current_cane = hurricane
    if current_year not in hurricanes_by_year_dict.keys():
      hurricanes_by_year_dict[current_year] = [current_cane]
    else:
      hurricanes_by_year_dict[current_year].append(current_cane)
  return hurricanes_by_year_dict

hurricanes_year_dict = hurricanes_by_year(new_hurricanes_dict)

# Counting Damaged Areas
# create dictionary of areas to store the number of hurricanes involved in
# 5
def hurricanes_by_area(hurricanes_dict):
  hurricanes_by_area_dict = {}
  count = 1
  for name, hurricane in hurricanes_dict.items():
    for affected_area in hurricane["Area Affected"]:
      if affected_area not in hurricanes_by_area_dict:
        hurricanes_by_area_dict[affected_area] = count
      else:
        hurricanes_by_area_dict[affected_area] += 1
  return hurricanes_by_area_dict

hurricanes_area_dict = hurricanes_by_area(new_hurricanes_dict)

# Calculating Maximum Hurricane Count
# find most frequently affected area and the number of hurricanes involved in
# 6
def area_affected_most(affected_areas_dict):
  most_affected_area = ["Central America"]
  max_count = 0
  for area, count in affected_areas_dict.items():
    if count > max_count:
      max_count = count
      most_affected_area[0] = area
  return most_affected_area[0], max_count
      
# Calculating the Deadliest Hurricane
# find highest mortality hurricane and the number of deaths
# 7
def greatest_deaths(deaths_list):
  max_death_count = max(deaths_list)
  hurricane_with_max_death = []
  for name, hurricane in new_hurricanes_dict.items():
    if hurricane["Death"] == max_death_count:
      hurricane_with_max_death.append(hurricane)
  return hurricane_with_max_death, max_death_count

# Rating Hurricanes by Mortality
# categorize hurricanes in new dictionary with mortality severity as key
# 8 Calculating Hurricane Maximum Damage
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

def hurricane_death_rating(hurricanes_dict):
  mortality_rating_dict = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}

  for name, hurricane in new_hurricanes_dict.items():
    if hurricane["Death"] == 0:
      mortality_rating_dict[0].append(hurricane)
    elif hurricane["Death"] > 0 and hurricane["Death"] <= 100:
      mortality_rating_dict[1].append(hurricane)
    elif hurricane["Death"] > 100 and hurricane["Death"] <= 500:
      mortality_rating_dict[2].append(hurricane)
    elif hurricane["Death"] > 500 and hurricane["Death"] <= 1000:
      mortality_rating_dict[3].append(hurricane)
    elif hurricane["Death"] > 1000 and hurricane["Death"] <= 10000:
      mortality_rating_dict[4].append(hurricane)
    else:
      mortality_rating_dict[5].append(hurricane)
  return mortality_rating_dict

# find highest damage inducing hurricane and its total cost
# 9
def greatest_damages(damages_dict):
  hurricane_with_max_damages = ["Central America"]
  max_damage_count = 0
  for name, hurricane in new_hurricanes_dict.items():
    if type(hurricane["Damage"]) == str or hurricane["Damage"] < max_damage_count:
      continue
    elif hurricane["Damage"] > max_damage_count:
      max_damage_count = hurricane["Damage"]
      hurricane_with_max_damages[0] = hurricane
  return hurricane_with_max_damages, max_damage_count

# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def hurricane_damage_rating(hurricanes_dict):
  mortality_rating_dict = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
  for name, hurricane in new_hurricanes_dict.items():
    if hurricane["Damage"] == "Damages not recorded":
      continue
    elif hurricane["Damage"] == 0:
      mortality_rating_dict[0].append(hurricane)
    elif hurricane["Damage"] > 0 and hurricane["Damage"] <= 100000000:
      mortality_rating_dict[1].append(hurricane)
    elif hurricane["Damage"] > 100000000 and hurricane["Damage"] <= 1000000000:
      mortality_rating_dict[2].append(hurricane)
    elif hurricane["Damage"] > 1000000000 and hurricane["Damage"] <= 10000000000:
      mortality_rating_dict[3].append(hurricane)
    elif hurricane["Damage"] > 10000000000 and hurricane["Damage"] <= 50000000000:
      mortality_rating_dict[4].append(hurricane)
    else:
      mortality_rating_dict[5].append(hurricane)
  return mortality_rating_dict
